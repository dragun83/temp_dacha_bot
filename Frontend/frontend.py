#!/bin/python
# Frontend application
# TODO: +–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –±–∞–∑–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –±–æ—Ç–∞
# TODO: +–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API backend
# TODO: +–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å–æ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤
# TODO: +–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–∞—Ç—á–∏–∫–æ–≤
# TODO: +–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–æ–≤
# TODO: +–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Å –æ–¥–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞
# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞ 
#       –∑–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å, –ø–æ—Å–ª–µ–¥–Ω–∏–π–µ —Å—É—Ç–∫–∏, –ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è, –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü)
# TODO: +–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏ –¥–∞—Ç—á–∏–∫–æ–≤ –ø–æ IP
# TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–Ω–º–∞—Ç–∞—Ö –∏ –ø—Ä–∏–≤—è–∑–∫—É –¥–∞—Ç—á–∏–∫–æ–≤ –∫ –∫–æ–º–Ω–∞—Ç–∞—Ö.

import httpx
import json
from io import BytesIO

import logging
import plotly.graph_objects as go
import plotly.io as pio
pio.kaleido.scope.mathjax = None
pio.renderers.default = 'png'

from telegram import (
    Update,
    ReplyKeyboardMarkup
)

from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ConversationHandler,
    filters,
    ContextTypes
)

(
    MAIN_MENU,
    CURRENT_TEMP_ALL,
    CURRENT_TEMP_ONE,
    HISTORY_PERIOD,
    CONFIG,
    ADD_SENSOR_IP,
    ADD_SENSOR_PORT,
    ADD_SENSOR_OFFSET,
    ADD_SENSOR_ACTIVITY,
    ADD_SENSOR_CONFIRM,
    DEL_SENSOR_IP,
    DEL_SENSOR_CONFIRM
) = range(12)

BACKEND_BASE_URL = "http://localhost:22222"
TELEGRAM_TOKEN = "7582204566:AAHJZKOUcEzPiE03rH6rM9THWV7jrMEftwU"

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO) #–ù–∞–¥–æ –ø–æ–Ω–∏–∑–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
logger = logging.getLogger(__name__)

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["1. –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "2. –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π"],
            ["3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞–º–∏", "4. –ü–æ–º–æ—â—å"],
        ],
        resize_keyboard=True,
    )

def current_temp_keyboard():
    return ReplyKeyboardMarkup(
        [["1.1 –°–æ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤", "1.2 –° –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞"], ["–ù–∞–∑–∞–¥"]],
        resize_keyboard=True,
    )

def sensors_control_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["3.1 –°–ø–∏—Å–æ–∫ –¥–∞—Ç—á–∏–∫–æ–≤", "3.2 –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—á–∏–∫"],
            ["3.3 –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—á–∏–∫", "–ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )

def confirm_keyboard():
    return ReplyKeyboardMarkup(
        [["‚úÖ –î–∞","‚ùå –ù–µ—Ç"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

def period_keyboard():
    return ReplyKeyboardMarkup(
        [
            ["–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å", "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å\n(—Å 0 —á–∞—Å–æ–≤)"],
            ["–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞","–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é"],
            ["–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü","–ù–∞–∑–∞–¥"]
         ],
         resize_keyboard=True,
         one_time_keyboard=True
    )

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def start(update: Update, context):
    await update.message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

async def current_temp_menu(update: Update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=current_temp_keyboard()
    )
    return CURRENT_TEMP_ALL 

async def handle_current_temp_all(update: Update, context):
    async with httpx.AsyncClient() as api_client:
        response = await api_client.get(BACKEND_BASE_URL + "/current_temp/")

    if response.status_code == 200:
        
        data = response.json()
        answer = ""
        for ip_address in data.keys():
            answer += f"IP –∞–¥—Ä–µ—Å : {ip_address}:\n"
            for modbus_offset in data[ip_address].keys():
                temp = data[ip_address][modbus_offset].get("last_temperature_value", "N/A")
                answer += f" üå° {modbus_offset} : {temp} ‚ÑÉ\n\n"
        
        await update.message.reply_text(
            text=f"–ü–æ–∫–∞–∑–∞–Ω–∏—è –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤:\n\n {"=" * 25}\n\n{answer}",
            reply_markup=main_menu_keyboard()
            )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!",
            reply_markup=main_menu_keyboard()
        )
    return MAIN_MENU

async def handle_current_temp_one(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ IP –¥–∞—Ç—á–∏–∫–∞ –∏ modbus offset —á–µ—Ä–µ–∑ \":\"")
    return CURRENT_TEMP_ONE

async def handle_current_temp_one_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        ip, modbus_offset = update.message.text.strip().split(':')
    except ValueError:
        await update.message.reply_text(
                f"‚ö†Ô∏è –ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã IP –∏ modbus offset (–ø—Ä–∏–º–µ—Ä: 192.168.1.1:100)",
                reply_markup=main_menu_keyboard()
            )
        return MAIN_MENU
    async with httpx.AsyncClient() as client:
        response = await client.get(url=f"{BACKEND_BASE_URL}/current_temp/")
    if response.status_code == 200:
        temp_value = response.json().get(ip, {}).get(modbus_offset, {}).get('last_temperature_value')
        if temp_value is not None:
            await update.message.reply_text(
                f"üå° –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ {ip}:{modbus_offset} = {temp_value} ‚ÑÉ",
                reply_markup=main_menu_keyboard()
            )
            return MAIN_MENU
        else:
            await update.message.reply_text(
                f"‚ö†Ô∏è –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ {ip}:{modbus_offset} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ö†Ô∏è ",
                reply_markup=main_menu_keyboard()
            )
            return MAIN_MENU
    else:
        await update.message.reply_text(
            f"‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

async def back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        reply_markup=main_menu_keyboard()
    )
    return MAIN_MENU

async def config_menu(update: Update, context):
    await update.message.reply_text(
        "–ù–∞—Å—Ç—Ä–π–æ–∫–∞ –¥–∞—Ç—á–∏–∫–æ–≤: ",
        reply_markup=sensors_control_keyboard()
    )
    return CONFIG

async def get_sensors_list(update: Update, context):
    async with httpx.AsyncClient() as client:
        api_response = await client.get(BACKEND_BASE_URL + "/config/")
    if api_response.status_code == 200:
        config = api_response.json()
        answer = "–°–ø–∏—Å–æ–∫ —Å–µ–Ω—Å–æ—Ä–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: \n\n"
        for sensor_ip in config.get("modbus_sensors").keys():
            answer += f"–°–µ–Ω—Å–æ—Ä {sensor_ip} :\n"
            answer += f" –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å : {config.get("modbus_sensors").get(sensor_ip).get("active")}\n"
            answer += f" –ü–æ—Ä—Ç : {config.get("modbus_sensors").get(sensor_ip).get("tcp_port")}\n"
            answer += f" ModBus offsets : {config.get("modbus_sensors").get(sensor_ip).get("modbus_offsets")}\n\n"
        print(answer)
        await update.message.reply_text(
            str(answer),
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!",
            reply_markup=main_menu_keyboard
        )
    return MAIN_MENU  

async def add_sensor(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å —Å–µ–Ω—Å–æ—Ä–∞.")
    return ADD_SENSOR_IP

async def add_sensor_ip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ip = update.message.text.strip()
    if not all(part.isdigit() and 0 <= int(part) <= 255 for part in ip.split('.')):
        await update.message.reply_text("IP –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ! (–Ω–∞–ø—Ä. 192.168.1.1)")
        return ADD_SENSOR_IP
    context.user_data['ip'] = ip
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞ (1-65535)")
    return ADD_SENSOR_PORT

async def add_sensor_port(update: Update, context: ContextTypes.DEFAULT_TYPE):
    port = update.message.text.strip()
    if not port.isdigit and 1 <= int(port) <= 65535:
        await update.message.reply_text("–≤–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–æ—Ä—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ! (1-65635)")
        return ADD_SENSOR_PORT
    context.user_data["port"] = port
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ MODBUS (modbus offset). –°–ø–∏—Å–æ–∫ —Ä–∞–∑–¥–µ–ª—è–π—Ç–µ –∑–∞–ø—è—Ç—ã–º–∏ \",\"(–ù–∞–ø—Ä. 100, 102, 104)")
    return ADD_SENSOR_OFFSET

async def add_sensor_offset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    modbus_offsets_raw = update.message.text.strip().split(",")
    context.user_data["modbus_offsets"] = [int(offset.strip()) for offset in modbus_offsets_raw]
    await update.message.reply_text(
        f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—á–∏–∫?",
        reply_markup=confirm_keyboard()
    )
    return ADD_SENSOR_ACTIVITY 

async def add_sensor_activity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    answer = update.message.text
    if answer.strip() == "‚úÖ –î–∞":
        context.user_data['sensor_activity'] = 'true'
    else:
        context.user_data['sensor_activity'] = 'false'
    await update.message.reply_text(
        f"""üîé –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n IP –ê–¥—Ä–µ—Å: {context.user_data["ip"]}
–ü–æ—Ä—Ç: {context.user_data["port"]}\n –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ—Å–µ—Ç–æ–≤: {context.user_data["modbus_offsets"]}
–î–∞—Ç—á–∏–∫ –∞–∫—Ç–∏–≤–µ–Ω: {context.user_data["sensor_activity"]}
""",
        reply_markup=confirm_keyboard()
    )
    return ADD_SENSOR_CONFIRM

async def add_sensor_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    async with httpx.AsyncClient() as client:
        post_data = {
              "active": context.user_data['sensor_activity'],
              "ip_address": context.user_data['ip'],
              "tcp_port": context.user_data['port'],
              "modbus_offsets": context.user_data['modbus_offsets']
        }
        print(json.dumps(post_data, indent=4))
        response = await client.post(BACKEND_BASE_URL + "/sensor/", data=json.dumps(post_data))
    if response.status_code == 200: 
        await update.message.reply_text(
            f"‚úÖ –î–∞—Ç—á–∏–∫ {context.user_data['ip']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
        reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞—Ç—á–∏–∫–∞ {context.user_data['ip']} –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!",
        reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU

async def del_sensor_ip(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –í–≤–æ–¥–∏–º –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ user_data IP –∞–¥—Ä–µ—Å —Å–µ–Ω—Å–æ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    """
    ip = update.message.text
    if ip == "3.3 –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—á–∏–∫":
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ IP –∞–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return DEL_SENSOR_IP
    elif not all(part.isdigit() and 0 <= int(part) <= 255 for part in ip.split('.')):
        await update.message.reply_text("IP –∞–¥—Ä–µ—Å —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ! (–Ω–∞–ø—Ä. 192.168.1.1)")
        return DEL_SENSOR_IP
    else:
        context.user_data['del_ip'] = ip
        await update.message.reply_text(
            f"–í—ã –¥–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–∞—Ç—á–∏–∫ {context.user_data['del_ip']}",
            reply_markup=confirm_keyboard()
        )
        return DEL_SENSOR_CONFIRM

async def del_sensor_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞. –í—ã–ø–æ–ª–Ω—è–µ—Ç API –∑–∞–ø—Ä–æ—Å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –¥–∞—Ç—á–∏–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å –≤ –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é.
    """
    ip = context.user_data['del_ip']
    async with httpx.AsyncClient() as client:
        response = await client.delete(url=f"{BACKEND_BASE_URL}/sensor/{ip}")
    if response.status_code == 200:
        await update.message.reply_text(
            f"üóëÔ∏è –î–∞—Ç—á–∏–∫ {ip} —É—Å–ø–µ—à–Ω–æ  —É–¥–∞–ª–µ–Ω.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    else:
        await update.message.reply_text(
            f"‚ùå –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞—Ç—á–∏–∫–∞ {ip} –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞.",
            reply_markup=main_menu_keyboard()
        )
        return MAIN_MENU
    
async def build_plot(raw_data, period, ip, modbus) -> BytesIO:
    timestamps = [str(row.get('software_timestamp')) for row in raw_data]
    values = [row.get('temperature_value') for row in raw_data]
    
    #print(f"Timestamps - {timestamps}||| Len = {len(timestamps)}")
    #print(f"Values - {values} ||| Len = {len(values)}")

    plot = go.Figure(data=go.Scatter(
        x=timestamps,
        y=values,
        mode='lines+markers',
        line=dict(color='firebrick', width=2),
        marker=dict(size=8),
        name='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)'
        ))
    plot.update_layout(
        title = "–ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã",
        xaxis_title='–í—Ä–µ–º—è',
        yaxis_title='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)',
        template='plotly_white'
        )
    
    file_name = f"plot_{period}_{ip}_{modbus}.html"
    with open(file_name, 'w') as html_file:
        plot.write_html(html_file)
    return file_name
    
async def get_hist_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message.text
    if message == "2. –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π":
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <IP –∞–¥—Ä–µ—Å>:<modbus offset>. –ù–∞–ø—Ä–∏–º–µ—Ä: 192.168.1.1:100",
        )
        return HISTORY_PERIOD
    elif "." in message and ":" in message:
        ip, modbus_offset = message.split(":")
        context.user_data["history_period_ip"] = ip
        context.user_data["history_period_modbus_offset"] = modbus_offset
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥",
            reply_markup=period_keyboard()
        )
        return HISTORY_PERIOD
    elif message == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å":
        context.user_data["history_period"] = "hour"
    elif message == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å\n(—Å 0 —á–∞—Å–æ–≤)":
        context.user_data["history_period"] = "day"
    elif message == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞":
        context.user_data["history_period"] = "24_hours"
    elif message == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é":
        context.user_data["history_period"] = "week"
    elif message == "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü":
        context.user_data["history_period"] = "month"
    async with httpx.AsyncClient() as client:
        response = await client.get(f"{BACKEND_BASE_URL}/history/{context.user_data['history_period_ip']}/{context.user_data["history_period_modbus_offset"]}/{context.user_data["history_period"]}")
    if response.status_code == 200:
        
        raw_data = response.json()
        
        report_name = await build_plot(raw_data, context.user_data['history_period'], context.user_data['history_period_ip'], context.user_data["history_period_modbus_offset"])

        await update.message.reply_document(document=report_name, 
                                         caption=f"–ì—Ä–∞—Ñ–∏–∫ –∑–∞ {message}", 
                                         reply_markup=main_menu_keyboard())
        
        return MAIN_MENU
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!",
            reply_markup=MAIN_MENU
        )
        return MAIN_MENU

def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            MAIN_MENU: [
                MessageHandler(filters.Regex("^1. –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞$"), current_temp_menu),
                MessageHandler(filters.Regex("^2. –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏–π$"), get_hist_data),
                MessageHandler(filters.Regex("^3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∞–º–∏$"), config_menu),
            ],
            CURRENT_TEMP_ALL: [
                MessageHandler(filters.Regex("^1.1 –°–æ –≤—Å–µ—Ö –¥–∞—Ç—á–∏–∫–æ–≤$"), handle_current_temp_all),
                MessageHandler(filters.Regex("^1.2 –° –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–∞—Ç—á–∏–∫–∞$"), handle_current_temp_one),
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back)
            ],
            CURRENT_TEMP_ONE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_current_temp_one_id_input),
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back)
            ],
            CONFIG: [
                MessageHandler(filters.Regex("^3.1 –°–ø–∏—Å–æ–∫ –¥–∞—Ç—á–∏–∫–æ–≤$"), get_sensors_list),
                MessageHandler(filters.Regex("^3.2 –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—á–∏–∫$"), add_sensor),
                MessageHandler(filters.Regex("^3.3 –£–¥–∞–ª–∏—Ç—å –¥–∞—Ç—á–∏–∫$"), del_sensor_ip),
                MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), back)
            ],
            ADD_SENSOR_IP: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_sensor_ip)],
            ADD_SENSOR_PORT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_sensor_port)],
            ADD_SENSOR_OFFSET: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_sensor_offset)],
            ADD_SENSOR_ACTIVITY: [
                MessageHandler(filters.Regex("^‚úÖ –î–∞$"), add_sensor_activity),
                MessageHandler(filters.Regex("^‚ùå –ù–µ—Ç$"), add_sensor_activity)
                ],
            ADD_SENSOR_CONFIRM: [
                MessageHandler(filters.Regex("^‚úÖ –î–∞$"), add_sensor_confirm),
                MessageHandler(filters.Regex("^‚ùå –ù–µ—Ç$"), cancel)
                ],
            DEL_SENSOR_IP: [MessageHandler(filters.TEXT & ~filters.COMMAND, del_sensor_ip)],
            DEL_SENSOR_CONFIRM: [
                MessageHandler(filters.Regex("^‚úÖ –î–∞$"), del_sensor_confirm),
                MessageHandler(filters.Regex("^‚ùå –ù–µ—Ç$"), cancel)
            ],
            HISTORY_PERIOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_hist_data)]

        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(conv_handler)
    application.run_polling()
 
if __name__ == "__main__":
    main()

